//
//  stl_alg.cpp

#include "stl_alg.hpp"

#include <algorithm>
#include <vector>
#include <cmath>
#include <iostream>
#include <list>

using std::vector;
using std::cout;
using std::endl;
using std::pair;
using std::list;

class Date {
public:
    // other public methods here
    bool operator<(const Date &d);

    int year()  const { return m_year; }
    int month() const { return m_month; }
    int day()   const { return m_day; }
private:
    int m_day;
    int m_month;
    int m_year;
};

bool Date::operator<(const Date &d)
{
    if (m_year < d.m_year)
    {
        return true;
    }
    if (m_year == d.m_year and m_month < d.m_month)
    {
        return true;
    }
    if (m_year == d.m_year and m_month == d.m_month  and m_day < d.m_day)
    {
        return true;
    }
    return false;
}

bool operator<(const Date &a, const Date &b)
{
    return a < b;
}

bool year_comparison(const Date &a, const Date &b)
{
    return a.year() < b.year();
}

void sort_dates()
{
    vector<Date> dates;
    // ....


    std::sort(dates.begin(), dates.end()); //  normal comparison

    std::sort(dates.begin(), dates.end(), year_comparison);  // comparison by year
}

void compute_frequency(vector<double> &prices, double start, double end, double step)
{

    int nbins = int(std::abs(end-start)/step);

    vector<pair<int, int>> count(nbins, std::make_pair(0,0));
    for (int i=0; i<nbins; ++i)
    {
        count[i].second = i;
    }

    for (int i=0; i<prices.size(); ++i)
    {
        if (start <= prices[i]  && prices[i] <= end)
        {
            int pos = int((prices[i] - start)/step);
            count[pos].first++;
        }
    }

   for (int i=0; i<nbins; ++i) {
      cout <<  count[i].first << endl  ;
   }

    std::sort(count.begin(), count.end());

    for (int i=0; i<nbins; ++i)
    {
        //int k = count[i].second;
        //cout << start + k * step << "-" << start + (k+1) * step << ": "  << count[i].first << endl  ;
    }
}

void copy_int_to_double()
{
    vector<int> ivector(100, 1);
    vector<double> dvector(100);

    std::copy(ivector.begin(), ivector.end(), dvector.begin());
}

void print_prices()
{
    vector<double> prices(100);

    // initialize prices here

    std::copy(prices.begin(), prices.end(), std::ostream_iterator<double>(cout));
}

void from_list_to_vector(const list<int> &l)
{
    vector<int> values;

    // copy contents to destination array values
    std::copy(l.begin(), l.end(), values.begin());
}

template <class T, class S >
typename T::const_iterator find(const T &a, S val) {
    return std::find (a.begin(), a.end(), val);
}

void find_value()
{
    vector<int> values;
    // ...  initialize the vector


    vector<int>::const_iterator aresult = find (values, 42);
    if (aresult == values.end())
    {
        return;
    }

    vector<int>::iterator result = std::find(values.begin(), values.end(), 42);
    if (result == values.end())
    {
        cout << " the value was not found " << endl;
    }
    else
    {
        cout << " the value found is " << *result << endl;
    }
}

bool greater_than_100(int num)
{
    return num > 100;
}


void conditional_find()
{
    vector<int> values;
    // ...  initialize the vector

    vector<int>::iterator result = std::find_if(values.begin(), values.end(), greater_than_100);
    if (result == values.end())
    {
        cout << " the value was not found " << endl;
    }
    else
    {
        cout << " the value found is " << *result << endl;
    }
}


class StandardOption {
public:
    StandardOption() : m_daysToExpiration() {}
    StandardOption(int days);
    StandardOption(const StandardOption &p);
    ~StandardOption();
    StandardOption &operator=(const StandardOption &p);

    int daysToExpiration() const { return m_daysToExpiration; }

    // other function members here ...
private:
    int m_daysToExpiration;
    // other data members here ...
};

StandardOption::StandardOption(int days)
: m_daysToExpiration(days)
{
}

StandardOption::StandardOption(const StandardOption &p)
: m_daysToExpiration(p.m_daysToExpiration)
{
}

StandardOption::~StandardOption()
{
}

StandardOption &StandardOption::operator=(const StandardOption &p)
{
    if (this != &p)
    {
        m_daysToExpiration = p.m_daysToExpiration;
    }
    return *this;
}



bool is_expiring(const StandardOption &opt)
{
    return opt.daysToExpiration() < 10;
}

vector<StandardOption> find_expiring_options(vector<StandardOption> &options)
{
    vector<StandardOption> result(options.size());
    std::copy_if(options.begin(), options.end(), result.begin(), is_expiring);
    if (result.size())
    {
        cout << " no expiring option was found " << endl;
    }
    return result;
}


int main_stlalg()
{
    vector<double> prices = //{32.3, 34, 35.6, 39.2, 38.7, 31.17, 33.14 };
   { 42.78184445930497,43.67760039111022,42.03826375399276,47.91999821950942,49.93858797561979,42.13542043645291,
      38.30163313879867,38.50027414977689,37.7250636004348,43.70213348996104,36.38765415703016,47.25755355070849,
      35.56734542552674,35.99168991528921,37.50304207091226,38.51564887862568,44.87803633063664,39.85416161118745,
      47.44804469670797,48.02670819457711,37.28933459695028,40.41342291119492,38.2241431256981,44.62217947447723,
      41.03013931222591,35.26208364477185,39.29846553276695,40.65633985086487,47.0228452753842,45.34835153322644,
      39.39700907758517,52.27811213309643,42.63383425974795,40.89249700685397,41.10156246193978,39.47450552642528,
      45.59502602477541,37.32130193926878,36.10652743201731,36.83751340467555,38.22808121445735,40.7856881669989,
      31.36116897916119,33.11108500567489,38.86526465282272,42.33702645101733,39.2742471198834,41.61902173680947,
      32.49702576258007,40.02264414256337,34.85704183624394,35.15089912484926,36.77881561140303,45.72989880475985,
      44.43533847264153,29.27318209468997,44.97598111118879,35.97246951040285,41.73849359918691,30.68554286551367,
      34.66388957398927,43.80717757989846,39.7612215330862,47.03770824841743,44.92093808726787,48.11052662262456,
      36.4622802991489,31.3763438464966,35.09788668863187,31.09792864705171,42.1708919897512,40.02911731364738,
      39.46342929025483,45.81695148690243,43.63955234200387,42.17909414196498,37.60123847103494,43.25668427477181,
      41.03317096943389,46.97461970715167,44.91857530250557,37.0296330565591,36.09364032256888,37.33186444898434,
      38.37820863425179,42.128977451259,33.12287928040585,28.13889923699566,46.93552821004177,39.08490400296763,
      41.40965593696255,40.39683039643357,48.26282345158097,41.38851709709769,47.37773643923619,39.93781367520791,
      39.11047037239822,43.87488862041591,41.84229452562683,39.11307544315284,37.12839597652669,44.45813941412536,
      46.73377993985634,40.11521346072037,34.02015829573072,39.21151096244717,42.5561533675194,36.66359384121515,
      41.03770604517,37.58841778747188,37.36556871510344,30.77799770440181,42.64301727420439,46.26442977570423,
      35.33601025545288,46.31322886198627,37.01799127095718,38.99354811415017,32.79446899107094,41.70857533970244,
      40.87126425385425,32.85178742653525,37.55174479960902,47.18768755976919,42.21866580998352,41.63945505098134,
      36.61444201381163,29.64780175729441,40.77940730811751,39.46542059833772,42.89910948035585,40.12317371206829,
      42.43411461262851,35.88329424968147,29.01277874836401,38.56417020122005,36.50605380753814,40.55350429022879,
      45.36041676143943,38.87427624108659,36.75057400908258,34.80509783081789,46.38341144819815,30.97062663171186,
      39.46841998395084,26.10220881020765,34.20563388133634,40.71062702993218,40.12931797110947,31.38512872543786,
      33.13674967978706,39.62942685602963,46.36085067393131,39.80501033808399,38.15726700221849,44.39924363525626,
      33.2093433391518,31.69765959365117,42.33574480376637,37.33957414264603,45.33505715441738,47.15451393845362,
      34.26571594660756,39.26995986487044,40.48923994719119,28.03197363217081,42.03042938796098,48.29611813824376,
      32.65568118134725,33.03599145413803,38.77497405042885,37.54218522530394,36.73257681618899,31.74650042342772,
      43.70466470964404,43.95509640314371,40.47615133493548,46.43657359714938,42.15964554414583,35.68711681489874,
      42.41889757076655,44.52894333095128,38.23053461983582,33.54328535346639,39.20584181138072,38.46221246681366,
      40.16257848097431,34.87088841002296,44.46483772617439,42.24668745434034,47.84207775896748,44.97672876224185,
      34.50511961621996,36.25259304044854,48.70433158530048,38.65071818129881,41.12872526425293,36.8081868413574,
      39.16674403418639,42.36081001508734,29.91648554931484,40.79507104027888,35.21155198669553,39.86467636572654,
      34.16312678619537,44.28402670706689,32.2972327479956,49.71775839494127,31.85655354085528,42.69305364709465,
      35.31978746186365,38.39450080730782,51.25056893970791,34.72778805729362,36.32614446260754,33.43739285911308,
      38.54791259888807,34.49410615577555,44.75187351018732,45.39390925523594,35.96500752668668,41.54084212999258,
      47.06467445316652,38.39843558787609,34.89666625244398,47.16228016827771,32.04148221250703,35.31171527834899,
      40.42768570708395,42.98450221591088,34.95534551402104,45.56143682645318,43.67081394265119,37.30970243365253,
      47.33704387524431,40.49347008302541,46.93380934436018,41.85656677613047,43.79909661106802,34.70490035774502,
      36.56227975761775,35.99756822956058,40.31782436791381,41.47620622591621,47.39499139910249,29.76361427786139,
      47.51448580510061,52.90916098669709,40.90020357863639,37.43710357613011,37.90639383683421,29.5225427825027,
      45.10107112650064,42.81735023814488,38.56173403457683,28.71518973969216,35.4745320400253,38.1960900110268,
      43.08875563412099,42.65915013188986,40.20701390247016,47.34133201355534,36.32572334393589,35.01705113251843,
      35.5712158922518,38.39474522298454,28.81977157422747,45.55283128685715,37.67622910978037,41.46910993158829,
      37.12918278792814,37.97333496653032,43.36143751335894,33.18434874172782,45.11338835476703,43.06015372494461,
      30.80180131883006,34.50602074468794,45.17317489203142,33.7276490034627,49.53753463483577,45.85841071421091,
      43.02365361972821,46.58265545026941,31.32267887691327,30.84752111873338,48.31335443087461,44.45394196493817,
      42.76587932441861,44.4780979288028,42.26632945954473,33.50331196186566,38.79403203262196,38.69960822121119,
      36.32280301539119,32.40982007652114,44.75746173057647,40.45497946850615,44.69217800086803,41.36346719520907,
      36.85109237756015,39.96877678729342,40.35461240877066,40.91148989776364,35.26240177760784,35.48287092375762,
      38.58465950042369,43.84253921028062,34.51879591594815,40.64679267671642,40.53928342449839,39.18602482572086,
      36.01912495449452,35.34399985569668,38.96216402722161,36.43618650109931,38.52661462890424,38.95256437398413,
      39.70645200370718,40.89035907475167,30.35549814699446,40.41779590913442,40.15272957970845,33.07259054852572,
      38.87556911017958,38.34240699043298,37.90850080011717,36.89488047726263,53.22072610927503,42.67238777483797,
      41.0412322196039,44.5538879373734,32.71162481918658,37.3528249148507,41.79667763835875,42.8961194793476,
      43.8709213919598,39.58930822003997,54.1117190718699,49.5526479474614,38.10265766021563,38.3328362883291,
      43.16194670143282,48.32865145554413,49.77219291224301,37.3563694900509,46.25511476472802,42.16008139722462,
      40.13524190936413,38.98346514030116,34.35142142925718,30.01386924975923,37.89573116126832,43.70972077192636,
      37.27034973834047,39.31443471387625,44.07161877381326,45.80342255388998,35.87713938023972,39.91225256774336,
      41.3959892114833,46.0725782312095,42.77872322109898,31.11185961679133,40.45032983311206,43.9421772825232,
      40.15968817379245,38.16683344854705,49.55977034103568,43.45626420932511,37.55532667654142,41.3907819459214,
      39.90979226272548,35.60428341330544,45.35212021797298,42.52938644602645,38.55952972080569,40.29431115502922,
      40.41342092411278,50.52770393302511,41.2319887087997,44.91666684917468,37.13675226533199,35.3562573099391,
      32.84725721979154,35.29073977284445,42.34288305769034,25.84026261785755,39.62245050708788,44.84604915217371,
      40.11578341866193,39.09919559200785,42.06175050871919,36.02303037427221,37.82331197692943,35.05942720028779,
      36.88813138017978,36.03711817827941,43.98757052666639,35.77717057739348 };
    compute_frequency(prices, 30.0, 50.0, 0.8);
    return 0;
}

